{"ast":null,"code":"var _jsxFileName = \"/Users/kenji/copilot-trial/notion-clone/notion-clone/client/src/components/Editor/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Editor.css\";\n// 名前変更した型をインポート\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  document,\n  workspace\n}) => {\n  _s();\n  const [content, setContent] = useState(\"\");\n  const handleChange = event => {\n    setContent(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor\",\n    children: [\"test\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"editor-textarea\",\n      value: content,\n      onChange: handleChange,\n      placeholder: \"Write your notes here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n// Use the document prop as needed in the component logic\n_s(Editor, \"KPwtwb4lt1NZxOwnjhyyIoKb9lQ=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Editor","document","workspace","_s","content","setContent","handleChange","event","target","value","className","children","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kenji/copilot-trial/notion-clone/notion-clone/client/src/components/Editor/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Editor.css\";\nimport DocumentModel from \"../../types/document\"; // 名前変更した型をインポート\n\ninterface EditorProps {\n  document?: DocumentModel | null;\n  workspace?: { id: string; name: string }; // Define a basic structure for Workspace\n}\n\nconst Editor: React.FC<EditorProps> = ({ document, workspace }) => {\n  const [content, setContent] = useState<string>(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(event.target.value);\n  };\n\n  return (\n    <div className=\"editor\">\n      test\n      <textarea\n        className=\"editor-textarea\"\n        value={content}\n        onChange={handleChange}\n        placeholder=\"Write your notes here...\"\n      />\n    </div>\n  );\n};\n\n// Use the document prop as needed in the component logic\nexport default Editor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc;AAC6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOlD,MAAMC,MAA6B,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAElD,MAAMS,YAAY,GAAIC,KAA6C,IAAK;IACtEF,UAAU,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAChC,CAAC;EAED,oBACEV,OAAA;IAAKW,SAAS,EAAC,QAAQ;IAAAC,QAAA,GAAC,MAEtB,eAAAZ,OAAA;MACEW,SAAS,EAAC,iBAAiB;MAC3BD,KAAK,EAAEL,OAAQ;MACfQ,QAAQ,EAAEN,YAAa;MACvBO,WAAW,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;;AAED;AAAAd,EAAA,CApBMH,MAA6B;AAAAkB,EAAA,GAA7BlB,MAA6B;AAqBnC,eAAeA,MAAM;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}