{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from \"react\";\nimport { api } from \"../utils/api\";\n// デフォルト値を提供するコンテキスト\nexport const AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: async () => {\n    throw new Error(\"login not implemented\");\n  },\n  signup: async () => {\n    throw new Error(\"signup not implemented\");\n  },\n  logout: () => {\n    throw new Error(\"logout not implemented\");\n  }\n});\n\n// カスタムフックとしての認証状態管理\nexport const useAuthState = () => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const fetchUser = async () => {\n      const currentUser = await api.getCurrentUser();\n      setUser(currentUser);\n    };\n    fetchUser();\n  }, []);\n  const login = async (email, password) => {\n    const loggedInUser = await api.login(email, password);\n    setUser(loggedInUser);\n  };\n  const signup = async (email, password) => {\n    try {\n      console.log(\"Attempting signup with:\", {\n        email,\n        password\n      });\n      const newUser = await api.signup(email, password);\n      console.log(\"Signup response:\", newUser);\n      setUser(newUser);\n      return newUser;\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      throw error; // エラーを再スローして呼び出し元でキャッチできるようにする\n    }\n  };\n  const logout = () => {\n    api.logout();\n    setUser(null);\n  };\n  return {\n    user,\n    login,\n    signup,\n    logout\n  };\n};\n\n// 認証コンテキストを使用するフック\n_s(useAuthState, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","api","AuthContext","user","login","Error","signup","logout","useAuthState","_s","setUser","fetchUser","currentUser","getCurrentUser","email","password","loggedInUser","console","log","newUser","error","useAuth","_s2","context"],"sources":["/Users/kenji/copilot-trial/notion-clone/notion-clone/client/src/hooks/useAuth.ts"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from \"react\";\nimport { api } from \"../utils/api\";\n\ninterface AuthContextType {\n  user: any | null;\n  login: (email: string, password: string) => Promise<any>;\n  signup: (email: string, password: string) => Promise<any>;\n  logout: () => void;\n}\n\n// デフォルト値を提供するコンテキスト\nexport const AuthContext = createContext<AuthContextType>({\n  user: null,\n  login: async () => {\n    throw new Error(\"login not implemented\");\n  },\n  signup: async () => {\n    throw new Error(\"signup not implemented\");\n  },\n  logout: () => {\n    throw new Error(\"logout not implemented\");\n  },\n});\n\n// カスタムフックとしての認証状態管理\nexport const useAuthState = () => {\n  const [user, setUser] = useState<any>(null);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const currentUser = await api.getCurrentUser();\n      setUser(currentUser);\n    };\n    fetchUser();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const loggedInUser = await api.login(email, password);\n    setUser(loggedInUser);\n  };\n\n  const signup = async (email: string, password: string) => {\n    try {\n      console.log(\"Attempting signup with:\", { email, password });\n      const newUser = await api.signup(email, password);\n      console.log(\"Signup response:\", newUser);\n      setUser(newUser);\n      return newUser;\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      throw error; // エラーを再スローして呼び出し元でキャッチできるようにする\n    }\n  };\n\n  const logout = () => {\n    api.logout();\n    setUser(null);\n  };\n\n  return { user, login, signup, logout };\n};\n\n// 認証コンテキストを使用するフック\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACtE,SAASC,GAAG,QAAQ,cAAc;AASlC;AACA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAkB;EACxDI,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,MAAAA,CAAA,KAAY;IACjB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C,CAAC;EACDC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAM,IAAID,KAAK,CAAC,wBAAwB,CAAC;EAC3C,CAAC;EACDE,MAAM,EAAEA,CAAA,KAAM;IACZ,MAAM,IAAIF,KAAK,CAAC,wBAAwB,CAAC;EAC3C;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMG,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACN,IAAI,EAAEO,OAAO,CAAC,GAAGb,QAAQ,CAAM,IAAI,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,WAAW,GAAG,MAAMX,GAAG,CAACY,cAAc,CAAC,CAAC;MAC9CH,OAAO,CAACE,WAAW,CAAC;IACtB,CAAC;IACDD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMP,KAAK,GAAG,MAAAA,CAAOU,KAAa,EAAEC,QAAgB,KAAK;IACvD,MAAMC,YAAY,GAAG,MAAMf,GAAG,CAACG,KAAK,CAACU,KAAK,EAAEC,QAAQ,CAAC;IACrDL,OAAO,CAACM,YAAY,CAAC;EACvB,CAAC;EAED,MAAMV,MAAM,GAAG,MAAAA,CAAOQ,KAAa,EAAEC,QAAgB,KAAK;IACxD,IAAI;MACFE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE;QAAEJ,KAAK;QAAEC;MAAS,CAAC,CAAC;MAC3D,MAAMI,OAAO,GAAG,MAAMlB,GAAG,CAACK,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC;MACjDE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,OAAO,CAAC;MACxCT,OAAO,CAACS,OAAO,CAAC;MAChB,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMb,MAAM,GAAGA,CAAA,KAAM;IACnBN,GAAG,CAACM,MAAM,CAAC,CAAC;IACZG,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,OAAO;IAAEP,IAAI;IAAEC,KAAK;IAAEE,MAAM;IAAEC;EAAO,CAAC;AACxC,CAAC;;AAED;AAAAE,EAAA,CArCaD,YAAY;AAsCzB,OAAO,MAAMa,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGvB,UAAU,CAACE,WAAW,CAAC;EACvC,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIlB,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOkB,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module"}