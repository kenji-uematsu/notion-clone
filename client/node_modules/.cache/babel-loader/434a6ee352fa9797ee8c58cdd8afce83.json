{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchDocument, saveDocument } from '../utils/api';\nconst useDocument = documentId => {\n  _s();\n  const [document, setDocument] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadDocument = async () => {\n      try {\n        const fetchedDocument = await fetchDocument(documentId);\n        setDocument(fetchedDocument);\n      } catch (err) {\n        setError('Failed to load document');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadDocument();\n  }, [documentId]);\n  const updateDocument = async updatedDocument => {\n    try {\n      await saveDocument(updatedDocument);\n      setDocument(updatedDocument);\n    } catch (err) {\n      setError('Failed to save document');\n    }\n  };\n  return {\n    document,\n    loading,\n    error,\n    updateDocument\n  };\n};\n_s(useDocument, \"QoN1s5BGGaCLwapJLfZMLZQcPLo=\");\nexport default useDocument;","map":{"version":3,"names":["useState","useEffect","fetchDocument","saveDocument","useDocument","documentId","_s","document","setDocument","loading","setLoading","error","setError","loadDocument","fetchedDocument","err","updateDocument","updatedDocument"],"sources":["/Users/kenji/copilot-trial/notion-clone/notion-clone/client/src/hooks/useDocument.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Document } from '../types/document';\nimport { fetchDocument, saveDocument } from '../utils/api';\n\nconst useDocument = (documentId: string) => {\n    const [document, setDocument] = useState<Document | null>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const loadDocument = async () => {\n            try {\n                const fetchedDocument = await fetchDocument(documentId);\n                setDocument(fetchedDocument);\n            } catch (err) {\n                setError('Failed to load document');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadDocument();\n    }, [documentId]);\n\n    const updateDocument = async (updatedDocument: Document) => {\n        try {\n            await saveDocument(updatedDocument);\n            setDocument(updatedDocument);\n        } catch (err) {\n            setError('Failed to save document');\n        }\n    };\n\n    return { document, loading, error, updateDocument };\n};\n\nexport default useDocument;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,aAAa,EAAEC,YAAY,QAAQ,cAAc;AAE1D,MAAMC,WAAW,GAAIC,UAAkB,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAkB,IAAI,CAAC;EAC/D,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAU,IAAI,CAAC;EACrD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACZ,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,eAAe,GAAG,MAAMZ,aAAa,CAACG,UAAU,CAAC;QACvDG,WAAW,CAACM,eAAe,CAAC;MAChC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVH,QAAQ,CAAC,yBAAyB,CAAC;MACvC,CAAC,SAAS;QACNF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDG,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEhB,MAAMW,cAAc,GAAG,MAAOC,eAAyB,IAAK;IACxD,IAAI;MACA,MAAMd,YAAY,CAACc,eAAe,CAAC;MACnCT,WAAW,CAACS,eAAe,CAAC;IAChC,CAAC,CAAC,OAAOF,GAAG,EAAE;MACVH,QAAQ,CAAC,yBAAyB,CAAC;IACvC;EACJ,CAAC;EAED,OAAO;IAAEL,QAAQ;IAAEE,OAAO;IAAEE,KAAK;IAAEK;EAAe,CAAC;AACvD,CAAC;AAACV,EAAA,CA9BIF,WAAW;AAgCjB,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module"}